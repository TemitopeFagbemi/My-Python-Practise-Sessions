{
 "cells": [
  {
   "cell_type": "markdown",
   "id": "26fe314a-4d55-4682-9957-fcb0f7c312f7",
   "metadata": {},
   "source": [
    "Headings - Hashtags\n",
    "# Welcome to 10Alytics\n",
    "## My name is Temi\n",
    "### Learning Python with 10Alytics\n",
    "#### Still in class\n",
    "##### Data Engineering Python intro\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "b7a351b2-9def-47ec-9821-0f638d5146a9",
   "metadata": {},
   "outputs": [
    {
     "ename": "SyntaxError",
     "evalue": "invalid syntax (31738575.py, line 2)",
     "output_type": "error",
     "traceback": [
      "  \u001b[36mCell\u001b[39m\u001b[36m \u001b[39m\u001b[32mIn[5]\u001b[39m\u001b[32m, line 2\u001b[39m\n\u001b[31m    \u001b[39m\u001b[31mPractise Session\u001b[39m\n             ^\n\u001b[31mSyntaxError\u001b[39m\u001b[31m:\u001b[39m invalid syntax\n"
     ]
    }
   ],
   "source": [
    "# testing comment\n",
    "Practise Session"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "012470af-d296-4060-9be2-03e7cb789d8b",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "114"
      ]
     },
     "execution_count": 3,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# testing comment\n",
    "38 * 3"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "id": "e13da380-b9fd-4d3a-81da-5dba4aab576a",
   "metadata": {},
   "outputs": [
    {
     "ename": "SyntaxError",
     "evalue": "expected 'else' after 'if' expression (2344399214.py, line 2)",
     "output_type": "error",
     "traceback": [
      "  \u001b[36mCell\u001b[39m\u001b[36m \u001b[39m\u001b[32mIn[6]\u001b[39m\u001b[32m, line 2\u001b[39m\n\u001b[31m    \u001b[39m\u001b[31mWill get in touch if I have any question\u001b[39m\n         ^\n\u001b[31mSyntaxError\u001b[39m\u001b[31m:\u001b[39m expected 'else' after 'if' expression\n"
     ]
    }
   ],
   "source": [
    "# Still testing comment\n",
    "Will get in touch if I have any question"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "id": "69ba5bd8-5fab-4bf5-9171-c9afdcbe3894",
   "metadata": {},
   "outputs": [
    {
     "ename": "SyntaxError",
     "evalue": "expected 'else' after 'if' expression (2146859377.py, line 1)",
     "output_type": "error",
     "traceback": [
      "  \u001b[36mCell\u001b[39m\u001b[36m \u001b[39m\u001b[32mIn[7]\u001b[39m\u001b[32m, line 1\u001b[39m\n\u001b[31m    \u001b[39m\u001b[31mWill get in touch if I have any question\u001b[39m\n         ^\n\u001b[31mSyntaxError\u001b[39m\u001b[31m:\u001b[39m expected 'else' after 'if' expression\n"
     ]
    }
   ],
   "source": [
    "Will get in touch if I have any question"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "id": "e653b6ac-9767-4c69-8667-dc188fa9e1ca",
   "metadata": {},
   "outputs": [
    {
     "ename": "SyntaxError",
     "evalue": "invalid syntax (1611568937.py, line 1)",
     "output_type": "error",
     "traceback": [
      "  \u001b[36mCell\u001b[39m\u001b[36m \u001b[39m\u001b[32mIn[8]\u001b[39m\u001b[32m, line 1\u001b[39m\n\u001b[31m    \u001b[39m\u001b[31mThanks for the amazing session.\u001b[39m\n           ^\n\u001b[31mSyntaxError\u001b[39m\u001b[31m:\u001b[39m invalid syntax\n"
     ]
    }
   ],
   "source": [
    "Thanks for the amazing session."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "id": "0c4cbab6-6775-4664-b775-ca7b968f1a26",
   "metadata": {},
   "outputs": [
    {
     "ename": "SyntaxError",
     "evalue": "invalid syntax (2199894534.py, line 1)",
     "output_type": "error",
     "traceback": [
      "  \u001b[36mCell\u001b[39m\u001b[36m \u001b[39m\u001b[32mIn[9]\u001b[39m\u001b[32m, line 1\u001b[39m\n\u001b[31m    \u001b[39m\u001b[31mPython introduction\u001b[39m\n           ^\n\u001b[31mSyntaxError\u001b[39m\u001b[31m:\u001b[39m invalid syntax\n"
     ]
    }
   ],
   "source": [
    "Python introduction"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "id": "52c67c39-8fc2-4ef0-9cbf-5c62f947b1c3",
   "metadata": {},
   "outputs": [
    {
     "ename": "SyntaxError",
     "evalue": "invalid syntax (835848335.py, line 1)",
     "output_type": "error",
     "traceback": [
      "  \u001b[36mCell\u001b[39m\u001b[36m \u001b[39m\u001b[32mIn[10]\u001b[39m\u001b[32m, line 1\u001b[39m\n\u001b[31m    \u001b[39m\u001b[31mWhat I am doing wrong\u001b[39m\n         ^\n\u001b[31mSyntaxError\u001b[39m\u001b[31m:\u001b[39m invalid syntax\n"
     ]
    }
   ],
   "source": [
    "What I am doing wrong"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "id": "b864010a-3704-4987-b33e-59efd0fe016c",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Object `wrong` not found.\n"
     ]
    }
   ],
   "source": [
    "What i am doing wrong?"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "id": "a2a2138d-1e15-4041-af14-d617a9220c0c",
   "metadata": {},
   "outputs": [
    {
     "ename": "SyntaxError",
     "evalue": "invalid syntax (751054687.py, line 1)",
     "output_type": "error",
     "traceback": [
      "  \u001b[36mCell\u001b[39m\u001b[36m \u001b[39m\u001b[32mIn[12]\u001b[39m\u001b[32m, line 1\u001b[39m\n\u001b[31m    \u001b[39m\u001b[31mError code kept appearing\u001b[39m\n          ^\n\u001b[31mSyntaxError\u001b[39m\u001b[31m:\u001b[39m invalid syntax\n"
     ]
    }
   ],
   "source": [
    "Error code kept appearing"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "id": "4c4b600e-3017-4c8c-a184-9f91bc51277a",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "176"
      ]
     },
     "execution_count": 13,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "93 + 83"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "id": "c15eb54b-ca81-41d1-8961-a3166f84aab2",
   "metadata": {
    "editable": true,
    "slideshow": {
     "slide_type": ""
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Object `wrong` not found.\n"
     ]
    }
   ],
   "source": [
    "What I am doing wrong?"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "id": "3c6d2953-ecf3-41c2-bb01-2b752647e26b",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Object `making` not found.\n"
     ]
    }
   ],
   "source": [
    "What mistake am I making?"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "id": "30279476-5c80-423d-b302-6a611e26aef6",
   "metadata": {},
   "outputs": [
    {
     "ename": "SyntaxError",
     "evalue": "invalid syntax (3350456993.py, line 1)",
     "output_type": "error",
     "traceback": [
      "  \u001b[36mCell\u001b[39m\u001b[36m \u001b[39m\u001b[32mIn[17]\u001b[39m\u001b[32m, line 1\u001b[39m\n\u001b[31m    \u001b[39m\u001b[31mHow could I improve my work ?\u001b[39m\n        ^\n\u001b[31mSyntaxError\u001b[39m\u001b[31m:\u001b[39m invalid syntax\n"
     ]
    }
   ],
   "source": [
    "How could I improve my work ?"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "id": "1ab4379b-63fe-4723-b841-8edab44a3c43",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Object `better` not found.\n"
     ]
    }
   ],
   "source": [
    "What can I do better?"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "b8672a18-37ed-47c3-848e-8abde0e7799f",
   "metadata": {},
   "source": [
    "# 10Alytics Python lesson\n",
    "## 10Alytics Python lesson"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "6d2d91b1-e411-4332-b093-0ca99b637cb6",
   "metadata": {},
   "source": [
    "##### Will get in touch if I have any question"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "afcf619a-c574-4c75-8dfd-bdd2670684ee",
   "metadata": {},
   "source": [
    "###### Will get in touch if I have any question"
   ]
  },
  {
   "cell_type": "raw",
   "id": "9552830e-f791-480d-bfc8-df433659b385",
   "metadata": {},
   "source": [
    "print(\"Will get in touch if I have any question\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "id": "e0a77dc3-be0e-4144-99af-1c529e569e38",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "What can I do better?\n"
     ]
    }
   ],
   "source": [
    "print(\"What can I do better?\")"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "063e2fac-eab7-43dd-a6f5-03045a7e8bf0",
   "metadata": {},
   "source": [
    "Types of \n",
    "1. Interger/float - Numbers\n",
    "2. String - Text\n",
    "3. Booleans - (True or false)\n",
    "4. Dictionary - \n",
    "5. Character - single value on a keyboard\n",
    "6. Tuples\n",
    "7. List - \n",
    "8. sets"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 22,
   "id": "d51e5e3d-ff83-4a5c-913f-8b972087e022",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "249049753"
      ]
     },
     "execution_count": 22,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# inter is a whole number , which could be negative or positive without decimals, of unlimited length\n",
    "249049753"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 23,
   "id": "e9e24264-ffac-42e1-85c4-abc37da0d83a",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "int"
      ]
     },
     "execution_count": 23,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "type(92548765)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 24,
   "id": "3e8f3cbb-e7f3-442c-813f-2215bb32a892",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "165878"
      ]
     },
     "execution_count": 24,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "82939 * 2 # to run, press shift + enter at the same time || # are regarded as comment"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 26,
   "id": "3b2704ee-1d1c-4dc8-b1e7-ff2564ff0a92",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "str"
      ]
     },
     "execution_count": 26,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "type(\"liquid\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 27,
   "id": "5c29bcd0-b828-4212-8a9a-f2ebb72d0ec5",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "float"
      ]
     },
     "execution_count": 27,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "type(204.5) # float are intergers with decimal points\n",
    "# it's accurate up to 15 decimal places"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 30,
   "id": "1c29de9f-c676-460f-abad-6a70cbe16fd8",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "str"
      ]
     },
     "execution_count": 30,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "type(\"/\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 31,
   "id": "ae675d57-d6ec-4cc0-b660-beffdb2e434c",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "2388"
      ]
     },
     "execution_count": 31,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Basic Arithmetic\n",
    "2343 + 45"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 32,
   "id": "f1b20b71-3a4c-4eb5-893c-63837ef2d775",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "5538"
      ]
     },
     "execution_count": 32,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "923 * 6"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 33,
   "id": "2db89133-0990-4c45-8c60-d47b0b0f4e1f",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "95.0"
      ]
     },
     "execution_count": 33,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "475 / 5"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 34,
   "id": "2c315224-c7ed-404b-8517-ad7592aef52e",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "599"
      ]
     },
     "execution_count": 34,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "682 - 83"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 35,
   "id": "e27c4d2f-8dfa-4f35-9f4a-2cd14845c57b",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "94"
      ]
     },
     "execution_count": 35,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Floor division\n",
    "564 // 6"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 36,
   "id": "0ead487c-7f91-4016-84c2-bf4d39054ba5",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "29"
      ]
     },
     "execution_count": 36,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "88 // 3"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 37,
   "id": "a1914912-5541-44df-b81f-b10c3b1bf504",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "1"
      ]
     },
     "execution_count": 37,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# modulo\n",
    "88 % 3"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 38,
   "id": "da6daf1b-3664-4719-b6e4-971861effa42",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "14"
      ]
     },
     "execution_count": 38,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "100 // 7"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 39,
   "id": "a02fa98b-3328-46b9-bd3e-d712142fe632",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "2"
      ]
     },
     "execution_count": 39,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "100 % 7"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 40,
   "id": "955e61c8-7b1a-4b9f-9a87-9341881d3e43",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "19683"
      ]
     },
     "execution_count": 40,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Raised to power\n",
    "3 ** 9"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 41,
   "id": "904f7f70-dc3c-4d1d-8bcd-b89655144589",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "27"
      ]
     },
     "execution_count": 41,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "3 ** 3"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 42,
   "id": "c81872f3-d3d9-45ed-bb3b-43f51d9faf27",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "34.5"
      ]
     },
     "execution_count": 42,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "23 * 1.5"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 43,
   "id": "7f896780-2a56-48ff-b970-65d3caf0403f",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "30.0"
      ]
     },
     "execution_count": 43,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "20 * 1.5"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 44,
   "id": "dfb9cdb0-0a1c-487b-8594-73fcc3ce2ab6",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "12.0"
      ]
     },
     "execution_count": 44,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "6 / 2 * 4"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 45,
   "id": "9d0ad4e3-a623-48d4-9cf8-69799f85c6a7",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "2.0"
      ]
     },
     "execution_count": 45,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "2 / 2 * 2"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 46,
   "id": "97257d60-89db-4691-bdce-53161e7f557c",
   "metadata": {},
   "outputs": [],
   "source": [
    "\n",
    "# Variable Assignment"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 50,
   "id": "aaba64d1-4aa7-42b0-a274-265695011561",
   "metadata": {},
   "outputs": [],
   "source": [
    "Children = 7"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 51,
   "id": "bea25d6e-2d2a-4169-9c54-d8919f42f45f",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "7"
      ]
     },
     "execution_count": 51,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "Children"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 52,
   "id": "bfac1622-8daa-40cc-a23f-d47b7c9f560c",
   "metadata": {},
   "outputs": [],
   "source": [
    "Adult = 5"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 53,
   "id": "77c6be08-a890-4a0a-bb9e-48cbc99b60d2",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "5"
      ]
     },
     "execution_count": 53,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "Adult"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 55,
   "id": "cfd3ac91-1bbd-4de5-85e0-ddbac3d42b93",
   "metadata": {},
   "outputs": [],
   "source": [
    "Teenagers = 17"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 56,
   "id": "45b9000a-d633-4c14-8414-099c690f0bcf",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "17"
      ]
     },
     "execution_count": 56,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "Teenagers"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 57,
   "id": "c056ee57-3c3c-4163-b2ef-47f69c30e4ed",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "52"
      ]
     },
     "execution_count": 57,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "Teenagers + Children * Adult"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 58,
   "id": "812fe38f-1220-4365-9b7e-92a1dd37d01f",
   "metadata": {},
   "outputs": [],
   "source": [
    "Trip = Teenagers + Children * Adult - 4"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 59,
   "id": "ac6c78f8-1095-41d7-9130-bce8a7044151",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "48"
      ]
     },
     "execution_count": 59,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "Trip"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 62,
   "id": "0058601f-b0d9-4261-9ed2-e7013587f604",
   "metadata": {},
   "outputs": [
    {
     "name": "stdin",
     "output_type": "stream",
     "text": [
      "what's your first test score? 13\n",
      "what's your second test score? 15\n",
      "what's your attendance test score? 14\n",
      "what's your exam score? 47\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "89.0"
      ]
     },
     "execution_count": 62,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Test calculator\n",
    "first_test = float(input(\"what's your first test score?\"))\n",
    "second_test = float(input(\"what's your second test score?\"))\n",
    "attendance = float(input(\"what's your attendance test score?\"))\n",
    "exam = float(input(\"what's your exam score?\"))\n",
    "\n",
    "total_score = first_test + second_test + attendance + exam\n",
    "\n",
    "total_score"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "e46ea854-9186-40f1-b87e-1d92c15b061c",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.13.2"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
